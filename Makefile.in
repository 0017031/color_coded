CXX = %CXX%
CXX_WARN = -Wall -Wextra -pedantic
CXX_NOWARN = -Wno-missing-field-initializers
CXX_OPT = -O3
CXX_MISC = -fPIC -pthread
CXX_INCLUDE = -Iinclude \
							-I${PWD}/lib/boost/config/include \
							-I${PWD}/lib/boost/system/include \
							-I${PWD}/lib/boost/detail/include \
							-I${PWD}/lib/boost/utility/include \
							-I${PWD}/lib/boost/core/include \
							-I${PWD}/lib/boost/type_traits/include \
							-I${PWD}/lib/boost/mpl/include \
							-I${PWD}/lib/boost/preprocessor/include \
							-I${PWD}/lib/boost/predef/include \
							-I${PWD}/lib/boost/iterator/include \
							-I${PWD}/lib/boost/smart_ptr/include \
							-I${PWD}/lib/boost/exception/include \
							-I${PWD}/lib/boost/io/include \
							-I${PWD}/lib/boost/functional/include \
							-I${PWD}/lib/boost/range/include \
							-I${PWD}/lib/boost/include \
							-I${PWD}/lib/boost/filesystem/include
CXX_PLATFORM_FLAGS = %CXX_PLATFORM_FLAGS%
CXX_FLAGS = -std=c++1y ${CXX_WARN} ${CXX_NOWARN} ${CXX_OPT} \
						${CXX_MISC} ${CXX_INCLUDE} ${CXX_PLATFORM_FLAGS}

LD_PLATFORM_LIBS = %LD_PLATFORM_LIBS%
LD_LIBS = ${LD_PLATFORM_LIBS} -llua -lz \
					-l:libclang.a \
					-l:libclangIndex.a \
					-l:libclangFormat.a \
					-l:libclangTooling.a \
					-l:libclangFrontendTool.a \
					-l:libclangFrontend.a \
					-l:libclangDriver.a \
					-l:libclangSerialization.a \
					-l:libclangCodeGen.a \
					-l:libclangParse.a \
					-l:libclangSema.a \
					-l:libclangStaticAnalyzerFrontend.a \
					-l:libclangStaticAnalyzerCheckers.a \
					-l:libclangStaticAnalyzerCore.a \
					-l:libclangAnalysis.a \
					-l:libclangARCMigrate.a \
					-l:libclangRewriteFrontend.a \
					-l:libclangRewrite.a \
					-l:libclangEdit.a \
					-l:libclangAST.a \
					-l:libclangLex.a \
					-l:libclangBasic.a \
					-l:libLLVMLTO.a \
					-l:libLLVMObjCARCOpts.a \
					-l:libLLVMLinker.a \
					-l:libLLVMipo.a \
					-l:libLLVMVectorize.a \
					-l:libLLVMBitWriter.a \
					-l:libLLVMIRReader.a \
					-l:libLLVMAsmParser.a \
					-l:libLLVMR600CodeGen.a \
					-l:libLLVMR600Desc.a \
					-l:libLLVMR600Info.a \
					-l:libLLVMR600AsmPrinter.a \
					-l:libLLVMSystemZDisassembler.a \
					-l:libLLVMSystemZCodeGen.a \
					-l:libLLVMSystemZAsmParser.a \
					-l:libLLVMSystemZDesc.a \
					-l:libLLVMSystemZInfo.a \
					-l:libLLVMSystemZAsmPrinter.a \
					-l:libLLVMHexagonCodeGen.a \
					-l:libLLVMHexagonAsmPrinter.a \
					-l:libLLVMHexagonDesc.a \
					-l:libLLVMHexagonInfo.a \
					-l:libLLVMNVPTXCodeGen.a \
					-l:libLLVMNVPTXDesc.a \
					-l:libLLVMNVPTXInfo.a \
					-l:libLLVMNVPTXAsmPrinter.a \
					-l:libLLVMCppBackendCodeGen.a \
					-l:libLLVMCppBackendInfo.a \
					-l:libLLVMMSP430CodeGen.a \
					-l:libLLVMMSP430Desc.a \
					-l:libLLVMMSP430Info.a \
					-l:libLLVMMSP430AsmPrinter.a \
					-l:libLLVMXCoreDisassembler.a \
					-l:libLLVMXCoreCodeGen.a \
					-l:libLLVMXCoreDesc.a \
					-l:libLLVMXCoreInfo.a \
					-l:libLLVMXCoreAsmPrinter.a \
					-l:libLLVMMipsDisassembler.a \
					-l:libLLVMMipsCodeGen.a \
					-l:libLLVMMipsAsmParser.a \
					-l:libLLVMMipsDesc.a \
					-l:libLLVMMipsInfo.a \
					-l:libLLVMMipsAsmPrinter.a \
					-l:libLLVMAArch64Disassembler.a \
					-l:libLLVMAArch64CodeGen.a \
					-l:libLLVMAArch64AsmParser.a \
					-l:libLLVMAArch64Desc.a \
					-l:libLLVMAArch64Info.a \
					-l:libLLVMAArch64AsmPrinter.a \
					-l:libLLVMAArch64Utils.a \
					-l:libLLVMARMDisassembler.a \
					-l:libLLVMARMCodeGen.a \
					-l:libLLVMARMAsmParser.a \
					-l:libLLVMARMDesc.a \
					-l:libLLVMARMInfo.a \
					-l:libLLVMARMAsmPrinter.a \
					-l:libLLVMPowerPCDisassembler.a \
					-l:libLLVMPowerPCCodeGen.a \
					-l:libLLVMPowerPCAsmParser.a \
					-l:libLLVMPowerPCDesc.a \
					-l:libLLVMPowerPCInfo.a \
					-l:libLLVMPowerPCAsmPrinter.a \
					-l:libLLVMSparcDisassembler.a \
					-l:libLLVMSparcCodeGen.a \
					-l:libLLVMSparcAsmParser.a \
					-l:libLLVMSparcDesc.a \
					-l:libLLVMSparcInfo.a \
					-l:libLLVMSparcAsmPrinter.a \
					-l:libLLVMTableGen.a \
					-l:libLLVMDebugInfo.a \
					-l:libLLVMOption.a \
					-l:libLLVMX86Disassembler.a \
					-l:libLLVMX86AsmParser.a \
					-l:libLLVMX86CodeGen.a \
					-l:libLLVMSelectionDAG.a \
					-l:libLLVMAsmPrinter.a \
					-l:libLLVMX86Desc.a \
					-l:libLLVMX86Info.a \
					-l:libLLVMX86AsmPrinter.a \
					-l:libLLVMX86Utils.a \
					-l:libLLVMJIT.a \
					-l:libLLVMLineEditor.a \
					-l:libLLVMMCAnalysis.a \
					-l:libLLVMMCDisassembler.a \
					-l:libLLVMInstrumentation.a \
					-l:libLLVMInterpreter.a \
					-l:libLLVMCodeGen.a \
					-l:libLLVMScalarOpts.a \
					-l:libLLVMInstCombine.a \
					-l:libLLVMTransformUtils.a \
					-l:libLLVMipa.a \
					-l:libLLVMAnalysis.a \
					-l:libLLVMProfileData.a \
					-l:libLLVMMCJIT.a \
					-l:libLLVMTarget.a \
					-l:libLLVMRuntimeDyld.a \
					-l:libLLVMObject.a \
					-l:libLLVMMCParser.a \
					-l:libLLVMBitReader.a \
					-l:libLLVMExecutionEngine.a \
					-l:libLLVMMC.a \
					-l:libLLVMCore.a \
					-l:libLLVMSupport.a

PROJECT = %PROJECT%

OUT_DIR = bin/
OBJ_DIR = ${OUT_DIR}obj/
TARGET = ${OUT_DIR}color_coded.so
BOOST_SYSTEM = ${OUT_DIR}libcolor_coded_boost_system.a
BOOST_FILESYSTEM = ${OUT_DIR}libcolor_coded_boost_filesystem.a

OBJS := $(patsubst %.cpp,%.cpp.o,$(wildcard src/*.cpp))
OBJS := $(filter-out ${EXCLUDE},${OBJS})
SRCS := ${OBJS:.cpp.o=.cpp}
OUT_OBJS := $(foreach obj,${OBJS}, ${OBJ_DIR}${obj})

log = echo "$(1)" 1>&2

all: ${TARGET}

${TARGET}_setup: setup ${BOOST_SYSTEM} ${BOOST_FILESYSTEM}
	$(call log,"Building ${TARGET}")

${TARGET}: ${TARGET}_setup ${OBJS}
	$(call log,"Linking $@")
	${CXX} -shared -o $@ ${CXX_FLAGS} ${OUT_OBJS} ${LD_LIBS} -Llib/boost/system/bin -Llib/boost/filesystem/bin -lcolor_coded_boost_system -lcolor_coded_boost_filesystem

setup:
	mkdir -p ${OBJ_DIR} ${OUT_DIR}
	./lib/track_api # Update the API version before compiling

clean:
	rm -f ${TARGET} ${OUT_OBJS}
	${MAKE} -C lib/boost/system CXX=${CXX} OUT_DIR=${OUT_DIR} clean
	${MAKE} -C lib/boost/filesystem CXX=${CXX} OUT_DIR=${OUT_DIR} clean
	$(call log,"Cleaned ${TARGET}")

${BOOST_SYSTEM}: setup
	${MAKE} -C lib/boost/system CXX="${CXX}" OUT_DIR="${OUT_DIR}" CXX_FLAGS="${CXX_FLAGS}"

${BOOST_FILESYSTEM}: setup ${BOOST_SYSTEM}
	${MAKE} -C lib/boost/filesystem CXX="${CXX}" OUT_DIR="${OUT_DIR}" CXX_FLAGS="${CXX_FLAGS}"

%.cpp.o: %.cpp
	$(call log,"  Compiling $<")
	mkdir -p ${OBJ_DIR}$(dir $<)
	${CXX} -c ${CXX_FLAGS} $< -o ${OBJ_DIR}$@

# For internal use only
open:
	gvim --noplugin \
		-c "set runtimepath^=${PWD}" \
		-c ":source ${PWD}/plugin/color_coded.vim"

open_with_plugins:
	gvim \
		-c "set runtimepath^=${PWD}" \
		-c ":source ${PWD}/plugin/color_coded.vim"

run:
	gvim --noplugin \
		-c "set runtimepath^=${PWD}" \
		-c "source ${PWD}/plugin/color_coded.vim" \
		test/simple.cpp

run_real:
	gvim --noplugin \
		-c "set runtimepath^=${PWD}" \
		-c "source ${PWD}/plugin/color_coded.vim" \
		src/main.cpp

run_stress:
	gvim --noplugin \
		-c "set runtimepath^=${PWD}" \
		-c "source ${PWD}/plugin/color_coded.vim" \
		test/stress.cpp

.SILENT:

.PHONY: all setup ${TARGET}_setup clean open run run_real run_stress
