#!/bin/bash

# Re-invoke the configure script
# and keep the output at bay.
if [ "$1" != "quiet" ];
then
  $0 "quiet" $@ > /dev/null
  exit $?
fi
shift

set -o errexit
set -o nounset

# Determine system
uname_linux=0
uname_cygwin=0
uname_osx=0
uname=$(uname)
if [ "$uname" = "Linux" ];
then
  uname_linux=1
elif [ "$uname" = "Darwin" ];
then
  uname_osx=1
elif [ "$(uname -o)" = "Cygwin" ];
then
  uname_cygwin=1
else
  echo "Invalid uname ($uname): unsuppported platform" 1>&2
  exit 1
fi

log() { echo "$@" 1>&2; }
log_start() { printf "$@" 1>&2; }
log_end() { echo "$@" 1>&2; }
log_exit() { echo "$@" 1>&2; exit 1; }

project=color_coded
log "Configuring ${project}"

cxx_platform_flags=
ld_platform_libs=

# Project-specific flags
clang=0
gcc=0

set +o errexit
  c++ -v |& grep "clang version" 2>&1 > /dev/null
  if [ $? -eq 0 ];
  then
    clang=1
    cxx_platform_flags="-stdlib=libc++ "$cxx_platform_flags
    ld_platform_libs=$ld_platform_libs"-lc++ "
  fi

  c++ -v |& grep "gcc version" 2>&1 > /dev/null
  if [ $? -eq 0 ];
  then
    gcc=1
  fi

  [[ $clang -eq 0 && $gcc -eq 0 ]] && log_exit "unknown compiler: c++"
set -o errexit

[ 1 -eq $uname_linux ] && log "Platform: Linux"
[ 1 -eq $uname_osx ] && log "Platform: OS X"
[ 1 -eq $uname_cygwin ] && log "Platform: Cygwin (NOT TESTED)"

function show_help
{
  log "Usage: $0 [OPTION...]"
  log
  log "General:"
  log "  -h, --help                                   Show this help message"
  log
  exit 0
}

# Parse params
for i in "$@"
do
  case $i in
    -h)
      show_help
      ;;
    --help*)
      show_help
      ;;

    *)
      # Unknown option
      ;;
  esac
done

# Update after params
log
[ 1 -eq $gcc ] && log "Compiler: gcc"
[ 1 -eq $clang ] && log "Compiler: clang"
log "CXX platform flags: ${cxx_platform_flags}"
log "LD platform flags: ${ld_platform_libs}"
log

log_start "Updating submodules..."
log_start " jest"
git submodule update --recursive --init lib/juble 2>&1 > /dev/null
pushd lib/juble && ./configure --disable-chai 2>&1 > /dev/null && popd
log_end " done"

# Configure the makefile
log_start "Populating Makefile..."
rm -f Makefile
sed "s#%CXX_PLATFORM_FLAGS%#${cxx_platform_flags}#" ./Makefile.in |\
sed "s#%LD_PLATFORM_LIBS%#${ld_platform_libs}#" > Makefile
log_end " done"

log "Done configuring ${project}"

# Describe next steps
log
log "To run compile, use \`make\`"
